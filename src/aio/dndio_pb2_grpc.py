# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import src.aio.dndio_pb2 as dndio__pb2

GRPC_GENERATED_VERSION = '1.66.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in dndio_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class rollSvcStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.roll = channel.unary_unary(
                '/rollSvc/roll',
                request_serializer=dndio__pb2.dndiomsg.SerializeToString,
                response_deserializer=dndio__pb2.rollreply.FromString,
                _registered_method=True)


class rollSvcServicer(object):
    """Missing associated documentation comment in .proto file."""

    def roll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_rollSvcServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'roll': grpc.unary_unary_rpc_method_handler(
                    servicer.roll,
                    request_deserializer=dndio__pb2.dndiomsg.FromString,
                    response_serializer=dndio__pb2.rollreply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rollSvc', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('rollSvc', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class rollSvc(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def roll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rollSvc/roll',
            dndio__pb2.dndiomsg.SerializeToString,
            dndio__pb2.rollreply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class charSvcStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.char = channel.unary_unary(
                '/charSvc/char',
                request_serializer=dndio__pb2.dndiomsg.SerializeToString,
                response_deserializer=dndio__pb2.charreply.FromString,
                _registered_method=True)


class charSvcServicer(object):
    """Missing associated documentation comment in .proto file."""

    def char(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_charSvcServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'char': grpc.unary_unary_rpc_method_handler(
                    servicer.char,
                    request_deserializer=dndio__pb2.dndiomsg.FromString,
                    response_serializer=dndio__pb2.charreply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'charSvc', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('charSvc', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class charSvc(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def char(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/charSvc/char',
            dndio__pb2.dndiomsg.SerializeToString,
            dndio__pb2.charreply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class lookupSvcStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.lookup = channel.unary_unary(
                '/lookupSvc/lookup',
                request_serializer=dndio__pb2.dndiomsg.SerializeToString,
                response_deserializer=dndio__pb2.lookupreply.FromString,
                _registered_method=True)


class lookupSvcServicer(object):
    """Missing associated documentation comment in .proto file."""

    def lookup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_lookupSvcServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'lookup': grpc.unary_unary_rpc_method_handler(
                    servicer.lookup,
                    request_deserializer=dndio__pb2.dndiomsg.FromString,
                    response_serializer=dndio__pb2.lookupreply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'lookupSvc', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('lookupSvc', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class lookupSvc(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def lookup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lookupSvc/lookup',
            dndio__pb2.dndiomsg.SerializeToString,
            dndio__pb2.lookupreply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class initSvcStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.init = channel.unary_unary(
                '/initSvc/init',
                request_serializer=dndio__pb2.dndiomsg.SerializeToString,
                response_deserializer=dndio__pb2.initreply.FromString,
                _registered_method=True)


class initSvcServicer(object):
    """Missing associated documentation comment in .proto file."""

    def init(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_initSvcServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'init': grpc.unary_unary_rpc_method_handler(
                    servicer.init,
                    request_deserializer=dndio__pb2.dndiomsg.FromString,
                    response_serializer=dndio__pb2.initreply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'initSvc', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('initSvc', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class initSvc(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def init(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/initSvc/init',
            dndio__pb2.dndiomsg.SerializeToString,
            dndio__pb2.initreply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
