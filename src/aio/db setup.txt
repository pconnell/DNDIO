USE DNDIO;

/*
ToDo:
    * add fields to tables:
        * character equipped items (limited map of text to text? or to list?)
        * class table - should have a valid name
        * update any other table fields / missing values in this file.
    * update source data where not fully cleaned:
        * any list column with no values should be a blank list
        * fix the impact data for saves in spells table...?
        * other fixes with maps and lists as needed - no fields should be blank, ever.
    * db interface - 
        * fix returns for character class data
        * fix returns for spellslot data
        * see if there's a way to do bulk query operations and forwarding with 
        * a good structured/designed REST request
    * fix the remaining 3 spell imports
    * check all db input data for weird apostrophes

*/


CREATE TABLE campaign (
    id text, //unsure
    owner text, //unsure - maybe discord user name
    PRIMARY KEY (id)
);

CREATE TABLE users(
    campaign_id text, //unsure
    user_id text, //unsure
    PRIMARY KEY (user_id)
);

CREATE TABLE char_table(
    campaign_id text,
    user_id text,
    char_name text,
    char_class text,
    level smallint,
    align text, 
    max_hp smallint, 
    curr_hp smallint,
    CHR smallint, 
    STR smallint,
    INT smallint,
    WIS smallint,
    DEX smallint,
    CON smallint,
    AC smallint,
    /*prof_bonus smallint,
    hit_dice frozen<map<smallint,smallint>>,*/
    background text,
    //merging from char_map
    spells list<text>,
    armor list<text>,
    weapons list<text>,
    skills list<text>,
    //end merge
    equipped map<text,text>,
    spellslots map<smallint, smallint>,
    PRIMARY KEY (campaign_id,user_id)
);


create table class_start (
    char_class text,
    hit_dice frozen<map<smallint, smallint>>,
    lvl_hp frozen<map<smallint, smallint>>,
    equip list<text>,
    proficiencies frozen<map<text,list<text>>>,
    start_hp text,
    alt_lvl_hp text,
    spell_dc text,
    spell_atk_mod text,
    PRIMARY KEY (char_class)
);


/*
INSERT INTO char_table (
    campaign_id,
    user_id,
    char_name,
    char_class,
    level,
    align,
    max_hp,
    curr_hp,
    CHR,STR,INT,WIS,DEX,CON,AC
) VALUES (
    'abcdef',
    'chorky#8402',
    'Bahlok',
    'Warlock',
    7,
    'Chaotic Neutral',
    53,
    40,
    15,15,15,15,15,15,15
);*/

/*CREATE TABLE weapons (
    name text,
    weapon_type text,
    range smallint,
    properties text,
    weight smallint,
    dmg list<frozen<map<text,frozen<map<smallint,smallint>>>>>,
    PRIMARY KEY (name)
);*/

CREATE TABLE weapons (
    name text,
    type text,
    subtype text,
    cost smallint,
    cost_unit text,
    dmg frozen<map<text,frozen<map<text,frozen<map<smallint,smallint>>>>>>,
    props list<text>,
    normal_range smallint,
    long_range smallint,
    mod list<text>,
    weight double,
    PRIMARY KEY(name)
);

/*CREATE TABLE spells (
    //id uuid,
    name text,
    save text,
    hard_mod smallint,
    mult smallint,
    addspellmod boolean,
    upcast frozen<map<smallint,frozen<map<smallint,smallint>>>>,
    dmg frozen<map<int,frozen<map<text,list<frozen<map<smallint,smallint>>>>>>>,
    time text,
    range text,
    components text,
    duration text,
    classes list<text>,
    conc boolean,
    lvl smallint,
    PRIMARY KEY (name)
);*/

CREATE TABLE spells (
    name text,
    level smallint,
    save text,
    dmg frozen<map<int,frozen<map<text,list<frozen<map<smallint,smallint>>>>>>>,
    upcast frozen<map<int,frozen<map<smallint,smallint>>>>,
    addspellmod boolean,
    hardmod smallint,
    mult smallint,
    conc boolean,
    duration text,
    components text,
    range text,
    time text,
    description text,
    save_data text,
    save_success text,
    char_classes list<text>,
    PRIMARY KEY (name)
);



create table skills (
    skill text,
    modifier text,
    PRIMARY KEY(skill)
);


create table armor (
    id uuid,
    name text,
    minSTR smallint,
    stealth_disadv boolean,
    weight smallint,
    type text,
    baseAC smallint,
    modAC text,
    cost_amt smallint,
    cost_unit text,
    don text,
    doff text,
    PRIMARY KEY (id)
);

CREATE TABLE armor (
    baseac smallint,
    cost_amt smallint,
    cost_unit text,
    doff text,
    don text,
    minstr smallint,
    modac text,
    name text,
    stealth_disadv boolean,
    type text,
    weight smallint,
    PRIMARY KEY(name)
); 

create table classes (
    class_id text,
    level smallint,
    prof_bonus smallint,
    features list<text>,
    class text,
    class_specific frozen<map<text,smallint>>,
    spellslots frozen<map<smallint,smallint>>,
    PRIMARY KEY (class_id)
);

/*
CREATE TABLE char_map (
    campaign_id text,
    char_id text,
    spells list<uuid>,
    armor list<uuid>,
    weapons list<uuid>,
    PRIMARY KEY(campaign_id,char_id)
);*/

CREATE TABLE classes (
    class_key text,
    class_name text,
    char_level smallint,
    prof_bonus smallint,
    features list<text>,
    hit_dice frozen<map<smallint,smallint>>,
    lvl_hp frozen<map<smallint,smallint>>,
    proficiencies list<frozen<map<text,list<text>>>>,
    atk_mod text,
    spellcast_mod text, 
    cantrips_known smallint,
    spells_known smallint,
    spellslots list<frozen<map<smallint,smallint>>>,
    infusions smallint,
    infused_items smallint,
    sorc_points smallint,
    rages smallint,
    martial_arts smallint,
    ki_points smallint,
    unarmored_mvmt smallint,
    sneak_attack frozen<map<smallint,smallint>>,
    PRIMARY KEY(class_key)
);

/*

example thinking-through-it queries...
////////////////////////////////////////////////////////////
//adding a weapon
SELECT user_id FROM users WHERE campaign_id = {};
SELECT id FROM weapons WHERE name = {} allow filtering;
UPDATE char_map 
    SET weapons = [{weapon_id}] + weapons 
    WHERE char_id = {};
////////////////////////////////////////////////////////////
//removing a weapon
SELECT id FROM weapons WHERE name = {} allow filtering;
//python - get the index of the item in the list...
DELETE weapons[{index}] from char_map WHERE id = {char id}
////////////////////////////////////////////////////////////
//adding a spell
SELECT user_id FROM users WHERE campaign_id = {id};
SELECT id FROM spells WHERE name={spellname} allow filtering;
UPDATE char_map
    SET spells = [{spell_id}] + spells
    WHERE char_id = {id};
////////////////////////////////////////////////////////////
//removing a spell
SELECT id FROM spells WHERE name = {} allow filtering;
DELETE spells[{index}] FROM char_map WHERE id = {char_id}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
//adding armor
SELECT user_id FROM users WHERE campaign_id = {id};
SELECT id FROM armor WHERE name={armor name} allow filtering;
UPDATE char_map
    SET armor = [{armor_id}] + armor
    WHERE char_id = {id};
////////////////////////////////////////////////////////////
//removing a spell
SELECT id FROM armor WHERE name = {} allow filtering;
DELETE armor[{index}] FROM char_map WHERE id = {char_id};
////////////////////////////////////////////////////////////
//rolling a spell
SELECT * FROM spells where name = {} allow filtering;
SELECT spells FROM char_map WHERE char_id = {};
SELECT * from character where id = {};
//verify that the spell is available
//roll the dice
//return the result
////////////////////////////////////////////////////////////
SELECT * from weapons WHERE name = {} allow filtering;
SELECT weapons FROM char_map WHERE char_id = {};
SELECT * from character where id = {};
//character has the weapon
//get character modifiers only?
//roll the dice
//return the result


////////////////////////////////////////////////////////////
SELECT weapons FROM char_map WHERE char_id = {};
SELECT id FROM weapons WHERE name = {} allow filtering;
SELECT equipped FROM char_map WHERE char_id = {};
//if the weapon is in the available weapons list
UPDATE char_map 
    SET equipped = [{'armor':[ids]},{'spells':[ids]},{'weapon':[id]}]

//otherwiseget the available weapons and tell them the names
SELECT name FROM weapons WHERE id IN {} //weapons query above;
////////////////////////////////////////////////////////////
///only really applicable for wizards...
SELECT spells FROM char_map WHERE char_id = {};
SELECT id FROM spells WHERE name = {} allow filtering;
SELECT equipped FROM char_map WHERE char_id = {};
//if the spell is in the available weapons list
UPDATE char_map 
    SET equipped = [{'armor':[ids]},{'spells':[ids]},{'weapon':[id]}]

//otherwiseget the available weapons and tell them the names
SELECT name FROM spells WHERE id IN {} //weapons query above;
////////////////////////////////////////////////////////////
///only really applicable for wizards...
SELECT armor FROM char_map WHERE char_id = {};
SELECT id FROM armor WHERE name = {} allow filtering;
SELECT equipped FROM char_map WHERE char_id = {};
//if the spell is in the available weapons list
UPDATE char_map 
    SET equipped = [{'armor':[ids]},{'spells':[ids]},{'weapon':[id]}]

//otherwiseget the available weapons and tell them the names
SELECT name FROM armor WHERE id IN {} //weapons query above;
////////////////////////////////////////////////////////////



SELECT * FROM spells WHERE id IN (
    SELECT spells FROM char_map WHERE char_id = {};
);

UPDATE char_map //add/remove to/from appropriate list...
SELECT id FROM spells WHERE name = {};

//UPDATE characters SET class={} WHERE 

*/