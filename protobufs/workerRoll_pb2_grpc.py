# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import workerRoll_pb2 as workerRoll__pb2

GRPC_GENERATED_VERSION = '1.66.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in workerRoll_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class rollAttackStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.rollAttack = channel.unary_unary(
                '/rollAttack/rollAttack',
                request_serializer=workerRoll__pb2.rollAttackmsg.SerializeToString,
                response_deserializer=workerRoll__pb2.rollReply.FromString,
                _registered_method=True)


class rollAttackServicer(object):
    """Missing associated documentation comment in .proto file."""

    def rollAttack(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_rollAttackServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'rollAttack': grpc.unary_unary_rpc_method_handler(
                    servicer.rollAttack,
                    request_deserializer=workerRoll__pb2.rollAttackmsg.FromString,
                    response_serializer=workerRoll__pb2.rollReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rollAttack', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('rollAttack', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class rollAttack(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def rollAttack(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rollAttack/rollAttack',
            workerRoll__pb2.rollAttackmsg.SerializeToString,
            workerRoll__pb2.rollReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class rollInitiativeStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.rollInitiative = channel.unary_unary(
                '/rollInitiative/rollInitiative',
                request_serializer=workerRoll__pb2.rollIniativemsg.SerializeToString,
                response_deserializer=workerRoll__pb2.rollReply.FromString,
                _registered_method=True)


class rollInitiativeServicer(object):
    """Missing associated documentation comment in .proto file."""

    def rollInitiative(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_rollInitiativeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'rollInitiative': grpc.unary_unary_rpc_method_handler(
                    servicer.rollInitiative,
                    request_deserializer=workerRoll__pb2.rollIniativemsg.FromString,
                    response_serializer=workerRoll__pb2.rollReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rollInitiative', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('rollInitiative', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class rollInitiative(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def rollInitiative(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rollInitiative/rollInitiative',
            workerRoll__pb2.rollIniativemsg.SerializeToString,
            workerRoll__pb2.rollReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class rollSpellcastStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.rollSpellcast = channel.unary_unary(
                '/rollSpellcast/rollSpellcast',
                request_serializer=workerRoll__pb2.rollSpellcastmsg.SerializeToString,
                response_deserializer=workerRoll__pb2.rollReply.FromString,
                _registered_method=True)


class rollSpellcastServicer(object):
    """Missing associated documentation comment in .proto file."""

    def rollSpellcast(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_rollSpellcastServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'rollSpellcast': grpc.unary_unary_rpc_method_handler(
                    servicer.rollSpellcast,
                    request_deserializer=workerRoll__pb2.rollSpellcastmsg.FromString,
                    response_serializer=workerRoll__pb2.rollReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rollSpellcast', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('rollSpellcast', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class rollSpellcast(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def rollSpellcast(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rollSpellcast/rollSpellcast',
            workerRoll__pb2.rollSpellcastmsg.SerializeToString,
            workerRoll__pb2.rollReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class rollDamageStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.rollDamage = channel.unary_unary(
                '/rollDamage/rollDamage',
                request_serializer=workerRoll__pb2.rollDamagemsg.SerializeToString,
                response_deserializer=workerRoll__pb2.rollReply.FromString,
                _registered_method=True)


class rollDamageServicer(object):
    """Missing associated documentation comment in .proto file."""

    def rollDamage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_rollDamageServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'rollDamage': grpc.unary_unary_rpc_method_handler(
                    servicer.rollDamage,
                    request_deserializer=workerRoll__pb2.rollDamagemsg.FromString,
                    response_serializer=workerRoll__pb2.rollReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rollDamage', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('rollDamage', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class rollDamage(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def rollDamage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rollDamage/rollDamage',
            workerRoll__pb2.rollDamagemsg.SerializeToString,
            workerRoll__pb2.rollReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class rollSaveStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.rollSave = channel.unary_unary(
                '/rollSave/rollSave',
                request_serializer=workerRoll__pb2.rollSavemsg.SerializeToString,
                response_deserializer=workerRoll__pb2.rollReply.FromString,
                _registered_method=True)


class rollSaveServicer(object):
    """Missing associated documentation comment in .proto file."""

    def rollSave(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_rollSaveServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'rollSave': grpc.unary_unary_rpc_method_handler(
                    servicer.rollSave,
                    request_deserializer=workerRoll__pb2.rollSavemsg.FromString,
                    response_serializer=workerRoll__pb2.rollReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rollSave', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('rollSave', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class rollSave(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def rollSave(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rollSave/rollSave',
            workerRoll__pb2.rollSavemsg.SerializeToString,
            workerRoll__pb2.rollReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
